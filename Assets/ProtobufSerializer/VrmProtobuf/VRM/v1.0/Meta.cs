// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: meta.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace VrmProtobuf {

  /// <summary>Holder for reflection information generated from meta.proto</summary>
  public static partial class MetaReflection {

    #region Descriptor
    /// <summary>File descriptor for meta.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MetaReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgptZXRhLnByb3RvEgtWcm1Qcm90b2J1ZhoeZ29vZ2xlL3Byb3RvYnVmL3dy",
            "YXBwZXJzLnByb3RvIrkCCgRNZXRhEg0KBXRpdGxlGAEgASgJEg8KB3ZlcnNp",
            "b24YAiABKAkSDgoGYXV0aG9yGAMgASgJEhoKEmNvbnRhY3RJbmZvcm1hdGlv",
            "bhgEIAEoCRIRCglyZWZlcmVuY2UYBSABKAkSMwoOdGh1bWJuYWlsSW1hZ2UY",
            "BiABKAsyGy5nb29nbGUucHJvdG9idWYuSW50MzJWYWx1ZRITCgthbGxvd2Vk",
            "VXNlchgHIAEoCRIUCgx2aW9sZW50VXNhZ2UYCCABKAkSEwoLc2V4dWFsVXNh",
            "Z2UYCSABKAkSFwoPY29tbWVyY2lhbFVzYWdlGAogASgJEhoKEm90aGVyUGVy",
            "bWlzc2lvblVybBgLIAEoCRIPCgdsaWNlbnNlGAwgASgJEhcKD290aGVyTGlj",
            "ZW5zZVVybBgNIAEoCWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::VrmProtobuf.Meta), global::VrmProtobuf.Meta.Parser, new[]{ "Title", "Version", "Author", "ContactInformation", "Reference", "ThumbnailImage", "AllowedUser", "ViolentUsage", "SexualUsage", "CommercialUsage", "OtherPermissionUrl", "License", "OtherLicenseUrl" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Meta : pb::IMessage<Meta> {
    private static readonly pb::MessageParser<Meta> _parser = new pb::MessageParser<Meta>(() => new Meta());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Meta> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VrmProtobuf.MetaReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Meta() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Meta(Meta other) : this() {
      title_ = other.title_;
      version_ = other.version_;
      author_ = other.author_;
      contactInformation_ = other.contactInformation_;
      reference_ = other.reference_;
      ThumbnailImage = other.ThumbnailImage;
      allowedUser_ = other.allowedUser_;
      violentUsage_ = other.violentUsage_;
      sexualUsage_ = other.sexualUsage_;
      commercialUsage_ = other.commercialUsage_;
      otherPermissionUrl_ = other.otherPermissionUrl_;
      license_ = other.license_;
      otherLicenseUrl_ = other.otherLicenseUrl_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Meta Clone() {
      return new Meta(this);
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 1;
    private string title_ = "";
    /// <summary>
    /// Describe the name of the avatar model
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 2;
    private string version_ = "";
    /// <summary>
    /// Describe the version that creates the model
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "author" field.</summary>
    public const int AuthorFieldNumber = 3;
    private string author_ = "";
    /// <summary>
    /// Describe the name of the author of the model
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Author {
      get { return author_; }
      set {
        author_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "contactInformation" field.</summary>
    public const int ContactInformationFieldNumber = 4;
    private string contactInformation_ = "";
    /// <summary>
    /// Describe the contact information of the author
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ContactInformation {
      get { return contactInformation_; }
      set {
        contactInformation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reference" field.</summary>
    public const int ReferenceFieldNumber = 5;
    private string reference_ = "";
    /// <summary>
    /// Describe original / related works of the avatar (URL), if any
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reference {
      get { return reference_; }
      set {
        reference_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "thumbnailImage" field.</summary>
    public const int ThumbnailImageFieldNumber = 6;
    private static readonly pb::FieldCodec<int?> _single_thumbnailImage_codec = pb::FieldCodec.ForStructWrapper<int>(50);
    private int? thumbnailImage_;
    /// <summary>
    /// The index to access the thumbnail image of the avatar model in gltf.images. The texture resolution of 2048x2048 is recommended
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? ThumbnailImage {
      get { return thumbnailImage_; }
      set {
        thumbnailImage_ = value;
      }
    }


    /// <summary>Field number for the "allowedUser" field.</summary>
    public const int AllowedUserFieldNumber = 7;
    private string allowedUser_ = "";
    /// <summary>
    /// A person who can perform with this avatars
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AllowedUser {
      get { return allowedUser_; }
      set {
        allowedUser_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "violentUsage" field.</summary>
    public const int ViolentUsageFieldNumber = 8;
    private string violentUsage_ = "";
    /// <summary>
    /// Perform violent acts with this avatar
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ViolentUsage {
      get { return violentUsage_; }
      set {
        violentUsage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sexualUsage" field.</summary>
    public const int SexualUsageFieldNumber = 9;
    private string sexualUsage_ = "";
    /// <summary>
    /// Perform sexual acts with this avatar
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SexualUsage {
      get { return sexualUsage_; }
      set {
        sexualUsage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "commercialUsage" field.</summary>
    public const int CommercialUsageFieldNumber = 10;
    private string commercialUsage_ = "";
    /// <summary>
    /// Commercial use
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CommercialUsage {
      get { return commercialUsage_; }
      set {
        commercialUsage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "otherPermissionUrl" field.</summary>
    public const int OtherPermissionUrlFieldNumber = 11;
    private string otherPermissionUrl_ = "";
    /// <summary>
    /// Describe the URL links of license with regard to other permissions
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OtherPermissionUrl {
      get { return otherPermissionUrl_; }
      set {
        otherPermissionUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "license" field.</summary>
    public const int LicenseFieldNumber = 12;
    private string license_ = "";
    /// <summary>
    /// License Type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string License {
      get { return license_; }
      set {
        license_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "otherLicenseUrl" field.</summary>
    public const int OtherLicenseUrlFieldNumber = 13;
    private string otherLicenseUrl_ = "";
    /// <summary>
    /// Describe the URL links of other license
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OtherLicenseUrl {
      get { return otherLicenseUrl_; }
      set {
        otherLicenseUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Meta);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Meta other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Title != other.Title) return false;
      if (Version != other.Version) return false;
      if (Author != other.Author) return false;
      if (ContactInformation != other.ContactInformation) return false;
      if (Reference != other.Reference) return false;
      if (ThumbnailImage != other.ThumbnailImage) return false;
      if (AllowedUser != other.AllowedUser) return false;
      if (ViolentUsage != other.ViolentUsage) return false;
      if (SexualUsage != other.SexualUsage) return false;
      if (CommercialUsage != other.CommercialUsage) return false;
      if (OtherPermissionUrl != other.OtherPermissionUrl) return false;
      if (License != other.License) return false;
      if (OtherLicenseUrl != other.OtherLicenseUrl) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (Author.Length != 0) hash ^= Author.GetHashCode();
      if (ContactInformation.Length != 0) hash ^= ContactInformation.GetHashCode();
      if (Reference.Length != 0) hash ^= Reference.GetHashCode();
      if (thumbnailImage_ != null) hash ^= ThumbnailImage.GetHashCode();
      if (AllowedUser.Length != 0) hash ^= AllowedUser.GetHashCode();
      if (ViolentUsage.Length != 0) hash ^= ViolentUsage.GetHashCode();
      if (SexualUsage.Length != 0) hash ^= SexualUsage.GetHashCode();
      if (CommercialUsage.Length != 0) hash ^= CommercialUsage.GetHashCode();
      if (OtherPermissionUrl.Length != 0) hash ^= OtherPermissionUrl.GetHashCode();
      if (License.Length != 0) hash ^= License.GetHashCode();
      if (OtherLicenseUrl.Length != 0) hash ^= OtherLicenseUrl.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Title.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Title);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Version);
      }
      if (Author.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Author);
      }
      if (ContactInformation.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ContactInformation);
      }
      if (Reference.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Reference);
      }
      if (thumbnailImage_ != null) {
        _single_thumbnailImage_codec.WriteTagAndValue(output, ThumbnailImage);
      }
      if (AllowedUser.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(AllowedUser);
      }
      if (ViolentUsage.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(ViolentUsage);
      }
      if (SexualUsage.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(SexualUsage);
      }
      if (CommercialUsage.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(CommercialUsage);
      }
      if (OtherPermissionUrl.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(OtherPermissionUrl);
      }
      if (License.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(License);
      }
      if (OtherLicenseUrl.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(OtherLicenseUrl);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (Author.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Author);
      }
      if (ContactInformation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ContactInformation);
      }
      if (Reference.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reference);
      }
      if (thumbnailImage_ != null) {
        size += _single_thumbnailImage_codec.CalculateSizeWithTag(ThumbnailImage);
      }
      if (AllowedUser.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AllowedUser);
      }
      if (ViolentUsage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ViolentUsage);
      }
      if (SexualUsage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SexualUsage);
      }
      if (CommercialUsage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CommercialUsage);
      }
      if (OtherPermissionUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OtherPermissionUrl);
      }
      if (License.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(License);
      }
      if (OtherLicenseUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OtherLicenseUrl);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Meta other) {
      if (other == null) {
        return;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.Author.Length != 0) {
        Author = other.Author;
      }
      if (other.ContactInformation.Length != 0) {
        ContactInformation = other.ContactInformation;
      }
      if (other.Reference.Length != 0) {
        Reference = other.Reference;
      }
      if (other.thumbnailImage_ != null) {
        if (thumbnailImage_ == null || other.ThumbnailImage != 0) {
          ThumbnailImage = other.ThumbnailImage;
        }
      }
      if (other.AllowedUser.Length != 0) {
        AllowedUser = other.AllowedUser;
      }
      if (other.ViolentUsage.Length != 0) {
        ViolentUsage = other.ViolentUsage;
      }
      if (other.SexualUsage.Length != 0) {
        SexualUsage = other.SexualUsage;
      }
      if (other.CommercialUsage.Length != 0) {
        CommercialUsage = other.CommercialUsage;
      }
      if (other.OtherPermissionUrl.Length != 0) {
        OtherPermissionUrl = other.OtherPermissionUrl;
      }
      if (other.License.Length != 0) {
        License = other.License;
      }
      if (other.OtherLicenseUrl.Length != 0) {
        OtherLicenseUrl = other.OtherLicenseUrl;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Title = input.ReadString();
            break;
          }
          case 18: {
            Version = input.ReadString();
            break;
          }
          case 26: {
            Author = input.ReadString();
            break;
          }
          case 34: {
            ContactInformation = input.ReadString();
            break;
          }
          case 42: {
            Reference = input.ReadString();
            break;
          }
          case 50: {
            int? value = _single_thumbnailImage_codec.Read(input);
            if (thumbnailImage_ == null || value != 0) {
              ThumbnailImage = value;
            }
            break;
          }
          case 58: {
            AllowedUser = input.ReadString();
            break;
          }
          case 66: {
            ViolentUsage = input.ReadString();
            break;
          }
          case 74: {
            SexualUsage = input.ReadString();
            break;
          }
          case 82: {
            CommercialUsage = input.ReadString();
            break;
          }
          case 90: {
            OtherPermissionUrl = input.ReadString();
            break;
          }
          case 98: {
            License = input.ReadString();
            break;
          }
          case 106: {
            OtherLicenseUrl = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
